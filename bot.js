import dotenv from "dotenv";
import TelegramBot from "node-telegram-bot-api";
import express from "express";
import multer from "multer";
import cors from "cors";
import path from "path";
import fs from "fs";
import { fileURLToPath } from "url";

dotenv.config();

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const CONFIG = {
  BOT_TOKEN: process.env.TOKEN,
  ADMIN_CHAT_ID: process.env.ADMIN_CHAT_ID,
  PORT: process.env.PORT || 3000,
  ORDER_START: process.env.ORDER_START,
  UPLOADS_DIR: path.join(__dirname, "uploads"),
  COUNTER_FILE: path.join(__dirname, "orderCounter.json"),
  ORDER_ID_PADDING: 4
};


class OrderCounter {
  constructor(counterFilePath, orderStart) {
    this.counterFilePath = counterFilePath;
    this.initializeCounter(orderStart);
  }

  initializeCounter(orderStart) {
    try {
      if (!orderStart) return;

      const envStart = parseInt(orderStart, 10);
      if (Number.isNaN(envStart) || envStart <= 0) return;

      const desiredLast = envStart - 1;
      const currentLast = this.readCurrentCounter();

      if (currentLast === null || currentLast < desiredLast) {
        this.writeCounter(desiredLast);
        console.log(`–°—á–µ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∑–Ω–∞—á–µ–Ω–∏–µ–º: ${desiredLast}`);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞ –∏–∑ ORDER_START:", error);
    }
  }

  readCurrentCounter() {
    if (!fs.existsSync(this.counterFilePath)) return null;

    try {
      const data = fs.readFileSync(this.counterFilePath, "utf8");
      const parsed = JSON.parse(data);
      return parsed.lastOrderNumber;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤:", error);
      return null;
    }
  }


  writeCounter(value) {
    try {
      fs.writeFileSync(
        this.counterFilePath,
        JSON.stringify({ lastOrderNumber: value })
      );
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤:", error);
      throw error;
    }
  }

  generateOrderId() {
    const currentCounter = this.readCurrentCounter() || 0;
    const nextCounter = currentCounter + 1;
    
    this.writeCounter(nextCounter);
    
    const formattedCounter = nextCounter.toString().padStart(CONFIG.ORDER_ID_PADDING, "0");
    return `–ó–∞–∫–∞–∑-${formattedCounter}`;
  }
}

class TelegramUtils {
  static formatOrderMessage(orderId, formData, files) {
    const { name, telephone, mail, message } = formData;
    
    return `
üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #${orderId}

üë§ –ò–º—è: ${name || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${telephone || "–ù–µ —É–∫–∞–∑–∞–Ω"}
‚úâÔ∏è Email: ${mail || "–ù–µ —É–∫–∞–∑–∞–Ω"}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${message || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}
üìé –§–∞–π–ª—ã: ${files.length > 0 ? `–ü—Ä–∏–ª–æ–∂–µ–Ω–æ (${files.length})` : "–ù–µ—Ç"}
    `.trim();
  }

  static async sendOrderToTelegram(bot, chatId, orderId, formData, files) {
    const messageText = this.formatOrderMessage(orderId, formData, files);
    
    await bot.sendMessage(chatId, messageText);

    for (const file of files) {
      try {
        const fileStream = fs.createReadStream(file.path);
        await bot.sendDocument(chatId, fileStream, {
          caption: `–§–∞–π–ª –¥–ª—è –∑–∞—è–≤–∫–∏ ${orderId}`,
        });
        
        fs.unlinkSync(file.path);
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ ${file.originalname}:`, error);
        try {
          fs.unlinkSync(file.path);
        } catch (_) {}
      }
    }

    await bot.sendMessage(chatId, "_____________________________");
  }
}

function ensureUploadsDirectory() {
  if (!fs.existsSync(CONFIG.UPLOADS_DIR)) {
    fs.mkdirSync(CONFIG.UPLOADS_DIR, { recursive: true });
  }
}

function validateConfig() {
  const requiredEnvVars = ['TOKEN', 'ADMIN_CHAT_ID', 'PORT'];
  const missing = requiredEnvVars.filter(varName => !process.env[varName]);
  
  if (missing.length > 0) {
    throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${missing.join(', ')}`);
  }
}

validateConfig();
ensureUploadsDirectory();

const orderCounter = new OrderCounter(CONFIG.COUNTER_FILE, CONFIG.ORDER_START);

const bot = new TelegramBot(CONFIG.BOT_TOKEN, {
  polling: true,
  filepath: false,
});

bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, chatId.toString());
});

const storage = multer.diskStorage({
  destination: (_req, _file, cb) => cb(null, CONFIG.UPLOADS_DIR),
  filename: (_req, file, cb) => cb(null, `${Date.now()}-${file.originalname}`),
});

const upload = multer({ storage });

const app = express();
app.use(cors());
app.use(express.json());

function validateFormData(formData) {
  const errors = [];
  
  if (formData.mail && !/\S+@\S+\.\S+/.test(formData.mail)) {
    errors.push("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email");
  }
  
  if (formData.telephone && !/^[\d\s\-\+\(\)]+$/.test(formData.telephone)) {
    errors.push("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞");
  }
  
  return {
    isValid: errors.length === 0,
    errors
  };
}
app.post("/api/submit-form", upload.array("files"), async (req, res) => {
  try {
    console.log("–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:", req.body);
    
    const formData = {
      name: req.body.name?.trim(),
      telephone: req.body.telephone?.trim(),
      mail: req.body.mail?.trim(),
      message: req.body.message?.trim()
    };
    
    const files = req.files || [];
    
    const validation = validateFormData(formData);
    if (!validation.isValid) {
      return res.status(400).json({
        success: false,
        message: "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö",
        errors: validation.errors
      });
    }
    
    const orderId = orderCounter.generateOrderId();
    console.log(`–°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑: ${orderId}`);
    
    await TelegramUtils.sendOrderToTelegram(
      bot,
      CONFIG.ADMIN_CHAT_ID,
      orderId,
      formData,
      files
    );
    
    console.log(`–ó–∞–∫–∞–∑ ${orderId} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram`);
    
    res.status(200).json({
      success: true,
      orderId: orderId,
      message: "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞",
    });
    
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏:", error);
    
    if (req.files) {
      req.files.forEach(file => {
        try {
          fs.unlinkSync(file.path);
        } catch (_) {}
      });
    }
    
    res.status(500).json({
      success: false,
      message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏",
    });
  }
});

app.use((error, req, res, next) => {
  console.error("–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ Express:", error);
  res.status(500).json({
    success: false,
    message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
  });
});

app.listen(CONFIG.PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${CONFIG.PORT}`);
  console.log(`Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω`);
  console.log(`–ü–∞–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫: ${CONFIG.UPLOADS_DIR}`);
});
