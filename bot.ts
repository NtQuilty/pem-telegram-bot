import TelegramBot from 'node-telegram-bot-api';
import express from 'express';
import multer from 'multer';
import cors from 'cors';
import path from 'path';
import fs from 'fs';
import { Response } from 'express';
import { FormRequest } from './types';

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
const uploadsDir = path.join(__dirname, 'uploads');
if (!fs.existsSync(uploadsDir)) {
  fs.mkdirSync(uploadsDir, { recursive: true });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot(process.env.TOKEN, { polling: true });

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
  destination: function (_req, _file, cb) {
    cb(null, uploadsDir);
  },
  filename: function (_req, file, cb) {
    cb(null, Date.now() + '-' + file.originalname);
  },
});

const upload = multer({ storage: storage });

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Express —Å–µ—Ä–≤–µ—Ä–∞
const app = express();
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
// bot.onText(/\/start/, msg => {
//   const chatId = msg.chat.id;
//   bot.sendMessage(
//     chatId,
//     `–í–∞—à Chat ID: ${chatId}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –∫–∞–∫ process.env.ADMIN_CHAT_ID –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–æ—Ç–∞.`
//   );
// });

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Å—á–µ—Ç—á–∏–∫–æ–º –∑–∞–∫–∞–∑–æ–≤
const counterFilePath = path.join(__dirname, 'orderCounter.json');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
function generateOrderId(): string {
  let counter = 1;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —Å—á–µ—Ç—á–∏–∫–æ–º
  if (fs.existsSync(counterFilePath)) {
    try {
      const data = fs.readFileSync(counterFilePath, 'utf8');
      const counterData = JSON.parse(data);
      counter = counterData.lastOrderNumber + 1;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤:', error);
    }
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
  try {
    fs.writeFileSync(counterFilePath, JSON.stringify({ lastOrderNumber: counter }));
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤:', error);
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ —Å –≤–µ–¥—É—â–∏–º–∏ –Ω—É–ª—è–º–∏
  const formattedCounter = counter.toString().padStart(4, '0');
  return `–ó–∞–∫–∞–∑-${formattedCounter}`;
}

// API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–∏–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Ñ–æ—Ä–º—ã
app.post('/api/submit-form', upload.array('files'), async (req: FormRequest, res: Response) => {
  try {
    const orderId = generateOrderId();
    console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', req.body);

    const { name, telephone, mail, message } = req.body;
    const files = req.files || [];

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    let messageText = `
üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #${orderId}

üë§ –ò–º—è: ${name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${telephone || '–ù–µ —É–∫–∞–∑–∞–Ω'}
‚úâÔ∏è Email: ${mail || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${message || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìé –§–∞–π–ª—ã: ${files.length > 0 ? `–ü—Ä–∏–ª–æ–∂–µ–Ω–æ (${files.length})` : '–ù–µ—Ç'}
    `;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.sendMessage(process.env.ADMIN_CHAT_ID, messageText);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
    for (const file of files) {
      await bot.sendDocument(process.env.ADMIN_CHAT_ID, file.path, {
        caption: `–§–∞–π–ª –¥–ª—è –∑–∞—è–≤–∫–∏ ${orderId}`,
      });

      // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
      fs.unlinkSync(file.path);
    }

    await bot.sendMessage(process.env.ADMIN_CHAT_ID, '_____________________________');

    res.status(200).json({
      success: true,
      orderId: orderId,
      message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞',
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
    res.status(500).json({
      success: false,
      message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏',
    });
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(process.env.PORT);
